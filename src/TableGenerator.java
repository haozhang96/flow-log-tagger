import java.util.Arrays;
import java.util.Objects;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.BiConsumer;
import java.util.function.IntFunction;
import java.util.function.Supplier;
import java.util.stream.Stream;

/**
 * This class generates tabular data lazily into a {@link Stream} of columns as string arrays.
 */
class TableGenerator implements TableSupplier {
    private final Long rows;
    private final Supplier<?>[] columnGenerators;
    private final BiConsumer<String[], IntFunction<String>> applicator;

    //==================================================================================================================
    // Constructors
    //==================================================================================================================

    /**
     * Construct an instance of <i>infinite</i> {@link TableGenerator} using a given list of column-generating
     *   {@link Supplier}s to generate every row.
     *
     * @param columnGenerators The column-generating {@link Supplier}s to use to generate every row of data
     */
    TableGenerator(Supplier<?>... columnGenerators) {
        this(null, columnGenerators);
    }

    /**
     * Construct an instance of <i>finite</i> {@link TableGenerator} using a given row limit and list of
     *   column-generating {@link Supplier}s to generate every row.
     *
     * @param rows The number of columns generated by this {@link TableGenerator}
     * @param columnGenerators The column-generating {@link Supplier}s to use to generate every row of data
     */
    TableGenerator(Long rows, Supplier<?>... columnGenerators) {
        this.rows = rows;
        this.columnGenerators = Objects.requireNonNull(columnGenerators);
        applicator = columnGenerators.length >= Constants.PARALLELISM ? Arrays::parallelSetAll : Arrays::setAll;
    }

    //==================================================================================================================
    // Supplier Implementation Methods
    //==================================================================================================================

    /**
     * @implNote This method returns a lazy {@link Stream}.
     */
    @Override
    public Stream<String[]> get() {
        final var generator = Stream.generate(() -> columnGenerators);
        return (rows != null ? generator.limit(rows) : generator).map(this::generate);
    }

    //==================================================================================================================
    // Iterable Implementation Methods
    //==================================================================================================================

    @Override
    public Spliterator<String[]> spliterator() {
        final var characteristics = Spliterator.ORDERED | Spliterator.NONNULL | Spliterator.IMMUTABLE;
        return rows != null
            ? Spliterators.spliterator(iterator(), rows, characteristics)
            : Spliterators.spliteratorUnknownSize(iterator(), characteristics);
    }

    //==================================================================================================================
    // Object Implementation Methods
    //==================================================================================================================

    @Override
    public String toString() {
        return rows != null
            ? "%s[rows=%d, columns=%d]".formatted(super.toString(), rows, columnGenerators.length)
            : "%s[columns=%d]".formatted(super.toString(), columnGenerators.length);
    }

    //==================================================================================================================
    // Private Helper Methods
    //==================================================================================================================

    private String[] generate(Supplier<?>... columnGenerators) {
        var columns = new String[columnGenerators.length];
        applicator.accept(columns, index -> String.valueOf(columnGenerators[index].get()));
        return columns;
    }
}
